#ifndef COLOR_IMPLICIT_BLENDING_GLSL
#define COLOR_IMPLICIT_BLENDING_GLSL

#include "../implicit/types.glsl"
#include "types.glsl"

// blending.glsl
// Generated by GLSL Reorganizer
// Functions: 3 functions

// From: mixing.glsl:10
ColorImplicit UnionEuclidean(ColorImplicit a, ColorImplicit b, ColorImplicit c, float radius) {
    Implicit base = UnionEuclidean(Implicit(a.Distance, a.Gradient), Implicit(b.Distance, b.Gradient), Implicit(c.Distance, c.Gradient), radius);
    vec4 color = (a.Color + b.Color + c.Color) / 3.0;
    return ColorImplicit(base.Distance, base.Gradient, color);
}

// From: mixing.glsl:17
ColorImplicit UnionEuclidean(ColorImplicit a, ColorImplicit b, float radius) {
    float blendingRatio;
    Implicit base = UnionEuclidean(Implicit(a.Distance, a.Gradient), Implicit(b.Distance, b.Gradient), radius, blendingRatio);
    vec4 color = mix(a.Color, b.Color, blendingRatio);
    return ColorImplicit(base.Distance, base.Gradient, color);
}

// From: mixing.glsl:25
ColorImplicit UnionSmoothMedial(ColorImplicit a, ColorImplicit b, float k) {
    float blendingRatio;
    Implicit base = UnionSmoothMedial(Implicit(a.Distance, a.Gradient), Implicit(b.Distance, b.Gradient), k, blendingRatio);
    vec4 color = mix(a.Color, b.Color, blendingRatio);
    return ColorImplicit(base.Distance, base.Gradient, color);
}

#endif // COLOR_IMPLICIT_BLENDING_GLSL
