#ifndef COLOR_IMPLICIT_OPERATIONS_GLSL
#define COLOR_IMPLICIT_OPERATIONS_GLSL

#include "../implicit/types.glsl"
#include "types.glsl"

// color_operations.glsl
// Generated by GLSL Reorganizer
// Functions: 10 functions

// From: operations.glsl:9
ColorImplicit Add(ColorImplicit a, ColorImplicit b) {
    float d = min(a.Distance, b.Distance);
    vec3 g = (d == a.Distance) ? a.Gradient : b.Gradient;
    vec4 c = (d == a.Distance) ? a.Color : b.Color;
    return ColorImplicit(d, g, c);
}

// From: operations.glsl:17
ColorImplicit Add(ColorImplicit a, ColorImplicit b, vec4 colorA, vec4 colorB) {
    float d = min(a.Distance, b.Distance);
    vec3 g = (d == a.Distance) ? a.Gradient : b.Gradient;
    vec4 c = (d == a.Distance) ? colorA : colorB;
    return ColorImplicit(d, g, c);
}

// From: operations.glsl:25
ColorImplicit Add(ColorImplicit a, float b) {
    return ColorImplicit(a.Distance + b, a.Gradient, a.Color);
}

// From: operations.glsl:81
ColorImplicit Atan(ColorImplicit a, ColorImplicit b) {
    float x = b.Distance;
    float y = a.Distance;
    float ir2 = 1.0 / (x * x + y * y);

    float distance = atan(y, x);
    vec3 gradient = vec3(-y * ir2, x * ir2, 0.0);
    vec4 color = 0.5 * (a.Color + b.Color);

    return ColorImplicit(distance, gradient, color);
}

// From: operations.glsl:38
ColorImplicit Max(ColorImplicit a, ColorImplicit b) {
    if(a.Distance >= b.Distance)
        return a;

    return b;
}

// From: operations.glsl:46
ColorImplicit Max(Implicit a, Implicit b, vec4 colorA, vec4 colorB) {
    float blendingRatio = a.Distance >= b.Distance ? 0.0 : 1.0;
    Implicit result = Max(a, b);
    return ColorImplicit(result.Distance, result.Gradient, mix(colorA, colorB, blendingRatio));
}

// From: operations.glsl:53
ColorImplicit Min(ColorImplicit a, ColorImplicit b) {
    if(a.Distance <= b.Distance)
        return a;

    return b;
}

// From: operations.glsl:61
ColorImplicit Min(Implicit a, Implicit b, vec4 colorA, vec4 colorB) {
    float blendingRatio = a.Distance <= b.Distance ? 0.0 : 1.0;
    Implicit result = Min(a, b);
    return ColorImplicit(result.Distance, result.Gradient, mix(colorA, colorB, blendingRatio));
}

// From: operations.glsl:76
ColorImplicit Negate(ColorImplicit iColorImplicit) {
    return ColorImplicit(-iColorImplicit.Distance, -iColorImplicit.Gradient, iColorImplicit.Color);
}

// From: operations.glsl:30
ColorImplicit Subtract(ColorImplicit a, ColorImplicit b) {
    float d = max(a.Distance, -b.Distance);
    vec3 g = (d == a.Distance) ? a.Gradient : -b.Gradient;
    vec4 c = (d == a.Distance) ? a.Color : b.Color;
    return ColorImplicit(d, g, c);
}

#endif // COLOR_IMPLICIT_OPERATIONS_GLSL
