#ifndef IMPLICIT_OPERATIONS_GLSL
#define IMPLICIT_OPERATIONS_GLSL

// operations.glsl
// Generated by GLSL Reorganizer
// Functions: 40 functions

#include "types.glsl"

// From: math_ops.glsl:31
Implicit Acos(Implicit iImplicit) {
    return Implicit(acos(iImplicit.Distance), -iImplicit.Gradient / sqrt(1.0 - iImplicit.Distance * iImplicit.Distance));
}

// From: math_ops.glsl:26
Implicit Asin(Implicit iImplicit) {
    return Implicit(asin(iImplicit.Distance), iImplicit.Gradient / sqrt(1.0 - iImplicit.Distance * iImplicit.Distance));
}

// From: math_ops.glsl:15
Implicit Cos(Implicit iImplicit) {
    return Implicit(cos(iImplicit.Distance), -sin(iImplicit.Distance) * iImplicit.Gradient);
}

// From: math_ops.glsl:10
Implicit Sin(Implicit iImplicit) {
    return Implicit(sin(iImplicit.Distance), cos(iImplicit.Distance) * iImplicit.Gradient);
}

// From: math_ops.glsl:20
Implicit Tan(Implicit iImplicit) {
    float sec = 1. / cos(iImplicit.Distance);
    return Implicit(tan(iImplicit.Distance), sec * sec * iImplicit.Gradient);
}

// From: math_ops.glsl:41
Implicit Atan(Implicit a, Implicit b) {
    float x = b.Distance;
    float y = a.Distance;
    float ir2 = 1.0 / (x * x + y * y);
    return Implicit(atan(y, x), vec3(-y * ir2, x * ir2, 0.0));
}

// From: math_ops.glsl:36
Implicit Atan(Implicit iImplicit) {
    return Implicit(atan(iImplicit.Distance), iImplicit.Gradient / (1.0 + iImplicit.Distance * iImplicit.Distance));
}

// From: math_ops.glsl:49
Implicit Exp(Implicit iImplicit) {
    float e = exp(iImplicit.Distance);
    return Implicit(e, e * iImplicit.Gradient);
}

// From: math_ops.glsl:55
Implicit Log(Implicit iImplicit) {
    return Implicit(log(iImplicit.Distance), iImplicit.Gradient / iImplicit.Distance);
}

// From: math_ops.glsl:66
Implicit Pow(Implicit iMantissa, Implicit iExponent) {
    float result = pow(iMantissa.Distance, iExponent.Distance);
    return Implicit(result, result * log(iMantissa.Distance) * iMantissa.Gradient);
}

// From: math_ops.glsl:60
Implicit Sqrt(Implicit iImplicit) {
    float s = sqrt(iImplicit.Distance);
    return Implicit(s, iImplicit.Gradient / (2.0 * s));
}

// From: basic_ops.glsl:39
Implicit Compare(Implicit iA, Implicit iB) {
    if(iA.Distance < iB.Distance)
        return CreateImplicit(-1.0);
    if(iA.Distance > iB.Distance)
        return CreateImplicit(1.0);
    return CreateImplicit(0.0);
}

// From: basic_ops.glsl:48
Implicit Compare(Implicit iA, float iB) {
    return Compare(iA, CreateImplicit(iB));
}

// From: basic_ops.glsl:53
Implicit Compare(float iA, Implicit iB) {
    return Compare(CreateImplicit(iA), iB);
}

// From: basic_ops.glsl:58
Implicit Compare(float iA, float iB) {
    return CreateImplicit(iA == iB ? 0.0 : (iA > iB ? 1.0 : -1.0));
}

// From: basic_ops.glsl:24
Implicit Divide(Implicit a, Implicit b) {
    return Implicit(a.Distance / b.Distance, (b.Distance * a.Gradient - a.Distance * b.Gradient) / (b.Distance * b.Distance));
}

// From: basic_ops.glsl:34
Implicit Divide(Implicit a, float b) {
    return Implicit(a.Distance / b, a.Gradient / b);
}

// From: basic_ops.glsl:29
Implicit Divide(float a, Implicit b) {
    return Divide(CreateImplicit(a), b);
}

// From: basic_ops.glsl:14
Implicit Multiply(Implicit a, Implicit b) {
    return Implicit(a.Distance * b.Distance, a.Distance * b.Gradient + b.Distance * a.Gradient);
}

// From: basic_ops.glsl:9
Implicit Multiply(Implicit a, float b) {
    return Implicit(a.Distance * b, a.Gradient * b);
}

// From: basic_ops.glsl:19
Implicit Multiply(float a, Implicit b) {
    return Implicit(a * b.Distance, a * b.Gradient);
}

// From: operations.glsl:7
Implicit Add(Implicit a, Implicit b) {
    return Implicit(a.Distance + b.Distance, a.Gradient + b.Gradient);
}

// From: operations.glsl:12
Implicit Add(Implicit a, float b) {
    return Implicit(a.Distance + b, a.Gradient);
}

// From: operations.glsl:61
Implicit Max(Implicit a, Implicit b) {
    if(a.Distance >= b.Distance) {
        return a;
    } else {
        return b;
    }
}

// From: operations.glsl:70
Implicit Max(Implicit a, Implicit b, Implicit c) {
    return Max(a, Max(b, c));
}

// From: operations.glsl:75
Implicit Max(Implicit a, Implicit b, Implicit c, Implicit d) {
    return Max(a, Max(b, Max(c, d)));
}

// From: operations.glsl:80
Implicit Max(Implicit a, float b) {
    return Max(a, CreateImplicit(b));
}

// From: operations.glsl:32
Implicit Min(Implicit a, Implicit b) {
    if(a.Distance <= b.Distance) {
        return a;
    } else {
        return b;
    }
}

// From: operations.glsl:41
Implicit Min(Implicit a, Implicit b, Implicit c) {
    return Min(a, Min(b, c));
}

// From: operations.glsl:46
Implicit Min(Implicit a, Implicit b, Implicit c, Implicit d) {
    return Min(a, Min(b, Min(c, d)));
}

// From: operations.glsl:51
Implicit Min(Implicit a, float b) {
    return Min(a, CreateImplicit(b));
}

// From: operations.glsl:17
Implicit Subtract(Implicit a, Implicit b) {
    return Implicit(a.Distance - b.Distance, a.Gradient - b.Gradient);
}

// From: operations.glsl:22
Implicit Subtract(Implicit a, float b) {
    return Implicit(a.Distance - b, a.Gradient);
}

// From: operations.glsl:27
Implicit Subtract(float a, Implicit b) {
    return Implicit(a - b.Distance, -b.Gradient);
}

// From: operations.glsl:56
Implicit Min(float a, Implicit b) {
    return Min(CreateImplicit(a), b);
}

// From: operations.glsl:85
Implicit Max(float a, Implicit b) {
    return Max(CreateImplicit(a), b);
}

// From: math_ops.glsl:72
Implicit Square(Implicit v) {
    return Multiply(v, v);
}

// From: math_ops.glsl:77
Implicit Dot(Implicit a_x, Implicit a_y, Implicit a_z, Implicit b_x, Implicit b_y, Implicit b_z) {
    Implicit _Dot_000 = Multiply(a_x, b_x);
    Implicit _Dot_001 = Multiply(a_y, b_y);
    Implicit _Dot_002 = Add(_Dot_000, _Dot_001);
    Implicit _Dot_003 = Multiply(a_z, b_z);
    return Add(_Dot_002, _Dot_003);
}

// From: basic_ops.glsl:63
Implicit EuclideanNorm(Implicit a, Implicit b) {
    return Sqrt(Add(Multiply(a, a), Multiply(b, b)));
}

// From: basic_ops.glsl:68
Implicit EuclideanNorm(Implicit a, Implicit b, Implicit c) {
    return Sqrt(Add(Add(Multiply(a, a), Multiply(b, b)), Multiply(c, c)));
}

// Absolute value of an implicit
Implicit Abs(Implicit a) {
    return Implicit(abs(a.Distance), sign(a.Distance) * a.Gradient);
}

// Negate an implicit
Implicit Negate(Implicit a) {
    return Implicit(-a.Distance, -a.Gradient);
}

// Euclidean intersection with blending
Implicit IntersectionEuclidean(Implicit a, Implicit b, float k) {
    float h = clamp(0.5 + 0.5 * (b.Distance - a.Distance) / k, 0.0, 1.0);
    vec3 grad = mix(b.Gradient, a.Gradient, h) - k * h * (1.0 - h) * normalize(b.Gradient - a.Gradient);
    return Implicit(mix(b.Distance, a.Distance, h) + k * h * (1.0 - h), grad);
}

// Sharp intersection of three implicits
Implicit IntersectSharp3(Implicit a, Implicit b, Implicit c) {
    if (a.Distance >= b.Distance && a.Distance >= c.Distance) {
        return a;
    } else if (b.Distance >= c.Distance) {
        return b;
    } else {
        return c;
    }
}

// 2D rotation matrix
mat2 Rotate2D(float angle) {
    float c = cos(angle);
    float s = sin(angle);
    return mat2(c, -s, s, c);
}

#endif // IMPLICIT_OPERATIONS_GLSL
